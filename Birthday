<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Happy Birthday!</title>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      background: radial-gradient(circle, #000428 0%, #004e92 100%);
      font-family: 'Arial', sans-serif;
      height: 100vh;
    }

    .message {
      position: absolute;
      top: 40%;
      left: 50%;
      transform: translate(-50%, -50%);
      text-align: center;
      color: #fff;
      z-index: 2;
      animation: float 3s ease-in-out infinite;
    }

    .message h1 {
      font-size: 4.5em;
      margin: 0;
      text-shadow: 0 0 10px #fff, 
                   0 0 20px #ff0080, 
                   0 0 30px #ff0080, 
                   0 0 40px #ff0080,
                   0 0 60px #ff0080;
      animation: colorChange 5s infinite alternate;
    }

    canvas {
      position: fixed;
      top: 0;
      left: 0;
      z-index: 1;
    }

    @keyframes float {
      0%, 100% { transform: translate(-50%, -50%); }
      50% { transform: translate(-50%, -55%); }
    }

    @keyframes colorChange {
      0% { color: #ff6b6b; }
      25% { color: #4ecdc4; }
      50% { color: #45b7d1; }
      75% { color: #96ceb4; }
      100% { color: #ffeead; }
    }
  </style>
</head>
<body>
  <div class="message">
    <h1>Happy Birthday!</h1>
  </div>

  <canvas id="fireworksCanvas"></canvas>

  <script>
    const canvas = document.getElementById('fireworksCanvas');
    const ctx = canvas.getContext('2d');
    let cw = window.innerWidth;
    let ch = window.innerHeight;
    canvas.width = cw;
    canvas.height = ch;

    window.addEventListener('resize', () => {
      cw = window.innerWidth;
      ch = window.innerHeight;
      canvas.width = cw;
      canvas.height = ch;
    });

    class Particle {
      constructor(x, y, color) {
        this.x = x;
        this.y = y;
        this.color = color;
        this.radius = Math.random() * 4 + 2;
        this.speed = Math.random() * 6 + 3;
        this.angle = Math.random() * Math.PI * 2;
        this.friction = 0.95;
        this.gravity = 0.6;
        this.alpha = 1;
        this.decay = Math.random() * 0.012 + 0.004;
        this.wind = (Math.random() - 0.5) * 0.1;
      }

      update() {
        this.speed *= this.friction;
        this.x += Math.cos(this.angle) * this.speed + this.wind;
        this.y += Math.sin(this.angle) * this.speed + this.gravity;
        this.alpha -= this.decay;
      }

      draw() {
        ctx.save();
        ctx.globalAlpha = this.alpha;
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
        ctx.fillStyle = this.color;
        ctx.fill();
        ctx.restore();
      }
    }

    class Firework {
      constructor(x = Math.random() * cw) {
        this.x = x;
        this.y = ch;
        this.targetY = Math.random() * (ch * 0.6);
        this.speed = Math.random() * 3 + 5;
        this.angle = Math.atan2(this.targetY - ch, this.x - this.x);
        this.exploded = false;
        this.particles = [];
        this.trail = [];
        this.hue = Math.floor(Math.random() * 360);
        this.brightness = Math.random() * 20 + 80;
      }

      update() {
        if (!this.exploded) {
          this.y -= this.speed;
          
          // Add trail effect
          this.trail.push({
            x: this.x,
            y: this.y,
            alpha: 1
          });

          // Update trail
          for (let i = this.trail.length - 1; i >= 0; i--) {
            this.trail[i].alpha -= 0.05;
            if (this.trail[i].alpha <= 0) this.trail.splice(i, 1);
          }

          if (this.y <= this.targetY) {
            this.explode();
          }
        } else {
          for (let i = this.particles.length - 1; i >= 0; i--) {
            const p = this.particles[i];
            p.update();
            p.draw();
            if (p.alpha <= 0) this.particles.splice(i, 1);
          }
        }
      }

      draw() {
        if (!this.exploded) {
          // Draw trail
          this.trail.forEach(point => {
            ctx.beginPath();
            ctx.arc(point.x, point.y, 2, 0, Math.PI * 2);
            ctx.fillStyle = `hsla(${this.hue}, 100%, ${this.brightness}%, ${point.alpha})`;
            ctx.fill();
          });

          // Draw firework
          ctx.beginPath();
          ctx.arc(this.x, this.y, 3, 0, Math.PI * 2);
          ctx.fillStyle = `hsl(${this.hue}, 100%, ${this.brightness}%)`;
          ctx.fill();
        }
      }

      explode() {
        this.exploded = true;
        const particleCount = 50 + Math.floor(Math.random() * 30);
        const angleStep = (Math.PI * 2) / particleCount;
        
        for (let i = 0; i < particleCount; i++) {
          const color = `hsl(${this.hue}, 100%, ${this.brightness}%)`;
          this.particles.push(new Particle(this.x, this.y, color));
        }
      }
    }

    let fireworks = [];
    let lastTime = 0;

    function animate(currentTime) {
      requestAnimationFrame(animate);

      // Control firework launch rate
      if (currentTime - lastTime > 1500 && Math.random() < 0.3) {
        fireworks.push(new Firework());
        lastTime = currentTime;
      }

      ctx.fillStyle = "rgba(0, 0, 0, 0.2)";
      ctx.fillRect(0, 0, cw, ch);

      fireworks.forEach((fw, i) => {
        fw.update();
        fw.draw();
        if (fw.exploded && fw.particles.length === 0) {
          fireworks.splice(i, 1);
        }
      });
    }

    animate();

    // Enhanced click event
    canvas.addEventListener('click', (e) => {
      const fw = new Firework(e.clientX);
      fw.targetY = e.clientY;
      fireworks.push(fw);
    });

    // Add touch support
    canvas.addEventListener('touchstart', (e) => {
      e.preventDefault();
      const touch = e.touches[0];
      const fw = new Firework(touch.clientX);
      fw.targetY = touch.clientY;
      fireworks.push(fw);
    });
  </script>
</body>
</html>
